import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

/* This Code is generated by Jahongir Hayitov */
public class Main  {
    // main properties of Main class
    private ArrayList<Animal> animalsList = new ArrayList<>();
    private ArrayList<String> consoleResult = new ArrayList<>();
    private File inFile = new File("input.txt");
    private Scanner sc = new Scanner(inFile);

    /**
     * @throws FileNotFoundException
     */
    public Main() throws FileNotFoundException {
    }

    /**
     * Output Error message and exit.
     * @param message String
     */
    private void output(String message) throws IOException {
        FileWriter file = new FileWriter("output.txt");
        PrintWriter outFile = new PrintWriter(file);
        System.out.println(message);
        outFile.print(message);
        outFile.close();
        System.exit(0);
    }

    private void outputToSave(String message) {
        consoleResult.add(message);
    }


    /**
     * Read every animal.
     * @param arr
     * @return Animal
     * @throws EnergyOutOfBoundsException
     * @throws SpeedOutOfBoundsException
     * @throws WeightOutOfBoundsException
     * @throws InvalidInputsException
     */
    private Animal receiveAnimal(String[] arr) throws EnergyOutOfBoundsException,
            SpeedOutOfBoundsException, WeightOutOfBoundsException, InvalidInputsException {

        // #############################

        // Type
        final String animalsName = arr[0];
        if (!(animalsName.equals("Boar") || animalsName.equals("Lion")
                || animalsName.equals("Zebra"))) {
            throw new InvalidInputsException();
        }

        // Weight
        final float weight = Float.parseFloat(arr[1]);
        // Limits
        final int upperLimitOfWeights = 200;
        final int lowerLimitOfWeights = 5;
        // Check with lower and upper limits for weight
        if (weight < lowerLimitOfWeights || weight > upperLimitOfWeights) {
            throw new WeightOutOfBoundsException();
        }

        // Speed
        final float speed = Float.parseFloat(arr[2]);
        // Limits
        final int upperLimitOfSpeed = 60;
        final int lowerLimitOfSpeed = 5;
        // Check with lower and upper limits for speed
        if (speed < lowerLimitOfSpeed || speed > upperLimitOfSpeed) {
            throw new SpeedOutOfBoundsException();
        }

        // Energy
        final int third = 3;
        final float energy = Float.parseFloat(arr[third]);
        // Limits
        final int upperLimitOfEnergy = 100;
        final int lowerLimitOfEnergy = 0;
        // Check with lower and upper limits for speed
        if (energy < lowerLimitOfEnergy || energy > upperLimitOfEnergy) {
            throw new EnergyOutOfBoundsException();
        }

        // System.out.println(animalsName + " " + weight + " " + speed + " " + energy);

        // new animal
        Animal animal = null;
        // create instance by condition
        if (animalsName.equals("Lion")) {
            animal = new Lion(weight, speed, energy);
        } else if (animalsName.equals("Zebra")) {
            animal = new Zebra(weight, speed, energy);
        } else {
            animal = new Boar(weight, speed, energy);
        }

        // #############################
        return animal;
    }

    /**
     * Read animal block.
     * @return ArrayList
     * @throws InvalidInputsException
     * @throws GrassOutOfBoundsException
     * @throws InvalidNumberOfAnimalParametersException
     * @throws WeightOutOfBoundsException
     * @throws SpeedOutOfBoundsException
     * @throws EnergyOutOfBoundsException
     */
    private ArrayList<Animal> readAnimals() throws InvalidInputsException,
            GrassOutOfBoundsException, InvalidNumberOfAnimalParametersException,
            WeightOutOfBoundsException, SpeedOutOfBoundsException, EnergyOutOfBoundsException {

        ArrayList<Animal> animals = new ArrayList<>();
        // #############################################


        // Number of animals
        final int zero = 0;
        final int one = 1;
        final int two = 2;
        final int three = 3;
        final int four = 4;
        final int twenty = 20;

        final String strNumOfAnimals = sc.nextLine();
        if (strNumOfAnimals.split(" ").length != one) {
            throw new InvalidInputsException();
        }
        final int numberOfAnimals = Integer.parseInt(strNumOfAnimals);
        // Limits
        final int upperLimitOfAnimals = twenty;
        final int lowerLimitOfAnimals = one;
        // Check with lower and upper limits for days
        if (numberOfAnimals < lowerLimitOfAnimals || numberOfAnimals > upperLimitOfAnimals) {
            throw new InvalidInputsException();
        }

        ArrayList<String[]> listOfArr = new ArrayList<>();
        // iterate number of animals and input
        for (int iter = zero; iter < numberOfAnimals; iter++) {
            final int numberOfParams = four;
            if (!sc.hasNextLine()) {
                throw new InvalidInputsException();
            }
            String str = sc.nextLine();
            String[] arr = str.split(" ");
            if (arr.length != numberOfParams) {
                throw new InvalidNumberOfAnimalParametersException();
            }

            /* arr - main array of parameters */
            listOfArr.add(arr);
        }

        for (int i = zero; i < three; i++) {
            int finalI = i;
            listOfArr.forEach(el -> {
                if (finalI == zero) {
                    // Type of animals
                    final String animalsName = el[zero];
                    if (!(animalsName.equals("Boar") || animalsName.equals("Lion")
                            || animalsName.equals("Zebra"))) {
                        try {
                            output("Invalid inputs");
                            throw new InvalidInputsException();
                        } catch (InvalidInputsException e) {
                            throw new RuntimeException(e);
                        } catch (IOException e) {
                            throw new RuntimeException(e);
                        }
                    }
                } else if (finalI == one) {
                    // Weight
                    final float weight = Float.parseFloat(el[one]);
                    // Limits
                    final int upperLimitOfWeights = 200;
                    final int lowerLimitOfWeights = 5;
                    // Check with lower and upper limits for weight
                    if (weight < lowerLimitOfWeights || weight > upperLimitOfWeights) {
                        try {
                            output("The weight is out of bounds");
                            throw new WeightOutOfBoundsException();
                        } catch (WeightOutOfBoundsException e) {
                            throw new RuntimeException(e);
                        } catch (IOException e) {
                            throw new RuntimeException(e);
                        }
                    }
                } else if (finalI == two) {
                    // Speed
                    final float speed = Float.parseFloat(el[two]);
                    // Limits
                    final int upperLimitOfSpeed = 60;
                    final int lowerLimitOfSpeed = 5;
                    // Check with lower and upper limits for speed
                    if (speed < lowerLimitOfSpeed || speed > upperLimitOfSpeed) {
                        try {
                            output("The speed is out of bounds");
                            throw new SpeedOutOfBoundsException();
                        } catch (SpeedOutOfBoundsException e) {
                            throw new RuntimeException(e);
                        } catch (IOException e) {
                            throw new RuntimeException(e);
                        }
                    }

                } else if (finalI == three) {
                    // Energy
                    final float energy = Float.parseFloat(el[three]);
                    // Limits
                    final int upperLimitOfEnergy = 100;
                    final int lowerLimitOfEnergy = 0;
                    // Check with lower and upper limits for speed
                    if (energy < lowerLimitOfEnergy || energy > upperLimitOfEnergy) {
                        try {
                            output("The energy is out of bounds");
                            throw new EnergyOutOfBoundsException();
                        } catch (EnergyOutOfBoundsException e) {
                            throw new RuntimeException(e);
                        } catch (IOException e) {
                            throw new RuntimeException(e);
                        }
                    }
                }
            });
        }
        // to recieve every animals paramater
        listOfArr.forEach(el -> {
            try {
                animals.add(receiveAnimal(el));
            } catch (Exception e) {
                try {
                    output(e.getMessage());
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });

        // If pieces are more than given number
        if (sc.hasNext() && !sc.next().equals("")) {
            throw new InvalidInputsException();
        }
        // #############################################
        return animals;
    }

    /**
     * print animals for test.
     * @param animals
     */
    private void printAnimals(ArrayList<Animal> animals) {
        animals.forEach((el) -> {
            System.out.println(el.getClass() + " " + el.getWeight() + " "
                    + el.getSpeed() + " " + el.getEnergy());
        });
    }

    /**
     * remove dead animals.
     * @param animals
     */
    private void removeDeadAnimals(ArrayList<Animal> animals) {
        // if some of the animals energy is 0 then they are died
        animals.removeIf((el) -> (el.getEnergy() == 0));
        animalsList = animals;
    }

    /**
     * method every day.
     * @param n
     * @param field
     * @param animals
     */
    private void runSimulation(int n, Field field, ArrayList<Animal> animals) {
        final int animalSize = animals.size();
        for (int iter = 0; iter < animalSize; iter++) {
            final int a = iter;
            // I used modulo when the last animal attack the first
            final int b = (int) (iter + 1) % animalSize;
            final String animalsNameA = animals.get(a).getClass().getName();
            final String animalsNameB = animals.get(b).getClass().getName();
            // if the size of array is 1 then there is a self hunting
            if (animalSize == 1) {
                outputToSave("Self-hunting is not allowed");
                continue;
            }
            if (animals.get(a).getEnergy() == 0) {
                continue;
            } else if (animalsNameA.equals("Zebra")) {
                final int ten = 10;
                final float hundred = 100F;
                if (animals.get(a).getWeight() / ten < field.getGrassAmount()) {
                    // Grass is eaten by zebra
                    field.setGrassAmount(field.getGrassAmount() - animals.get(a).getWeight() / ten);
                    // Zebra increase its energy
                    animals.get(a).setEnergy(Math.min(hundred,
                            animals.get(a).getEnergy() + animals.get(a).getWeight() / ten));
                }
            } else if (animalsNameA.equals("Lion")) {
                if (animalsNameB.equals("Lion")) {
                    outputToSave("Cannibalism is not allowed");
                } else {
                    // if zebra or boar
                    // if lion wins
                    final float hundred = 100F;
                    if (animals.get(b).getSpeed() < animals.get(a).getSpeed()
                            || animals.get(b).getEnergy() < animals.get(a).getEnergy()) {
                        // lion energy increase
                        animals.get(a).setEnergy(Math.min(hundred,
                                animals.get(b).getWeight() + animals.get(a).getEnergy()));
                        // zebra/boar energy = 0
                        animals.get(b).setEnergy(0);
                    } else {
                        outputToSave("The prey is too strong or too fast to attack");
                    }
                }
            } else {
                // Boar
                final int ten = 10;
                final float hundred = 100F;
                if (animals.get(a).getWeight() / ten < field.getGrassAmount()) {
                    // Grass is eaten by boar
                    field.setGrassAmount(field.getGrassAmount() - animals.get(a).getWeight() / ten);
                    // Boar increase its energy
                    animals.get(a).setEnergy(Math.min(hundred,
                            animals.get(a).getEnergy() + animals.get(a).getWeight() / ten));
                }

                if (animalsNameB.equals("Boar")) {
                    outputToSave("Cannibalism is not allowed");
                } else {
                    // if zebra or lion

                    // if boar wins
                    if (animals.get(b).getSpeed() < animals.get(a).getSpeed()
                            || animals.get(b).getEnergy() < animals.get(a).getEnergy()) {
                        // boar energy increase
                        animals.get(a).setEnergy(Math.min(hundred,
                                animals.get(b).getWeight() + animals.get(a).getEnergy()));
                        // zebra/lion energy = 0
                        animals.get(b).setEnergy(0);
                    } else {
                        outputToSave("The prey is too strong or too fast to attack");
                    }
                }

            }

            // energy - 1
            final float energy = animals.get(iter).getEnergy();
            animals.get(iter).setEnergy(Math.max(energy - 1, 0));
        }

        animalsList = animals;
        // grass * 2
        field.grassGrow();
        // remove dies
        removeDeadAnimals(animalsList);
    }


    /**
     * The main method which starts the whole program.
     * This method controls what will happen
     * @param args convention
     */
    public static void main(String[] args) throws IOException {
        /*
         * Main method to implement.
         */
        Main main = new Main();


        /* Read input and output. */
        try {
            if (!main.sc.hasNextLine()) {
                throw new InvalidInputsException();
            }

            // Days
            final int one = 1;
            final String strDays = main.sc.nextLine();
            if (strDays.split(" ").length != 1) {
                throw new InvalidInputsException();
            }
            final int days = Integer.parseInt(strDays);
            // Limits
            final int upperLimitOfDays = 30;
            final int lowerLimitOfDays = 1;
            // Check with lower and upper limits for days
            if (days < lowerLimitOfDays || days > upperLimitOfDays) {
                throw new InvalidInputsException();
            }

            // Grass
            final String strGrass = main.sc.nextLine();
            if (strGrass.split(" ").length != 1) {
                throw new GrassOutOfBoundsException();
            }
            final float grass = Float.parseFloat(strGrass);
            // Limits
            final int upperLimitOfGrass = 100;
            final int lowerLimitOfGrass = 0;
            // Check with lower and upper limits for grass
            if (grass < lowerLimitOfGrass || grass > upperLimitOfGrass) {
                throw new GrassOutOfBoundsException();
            }

            // Create a Field
            Field field = new Field(grass);

            // Create Animal Array List #
            main.animalsList = main.readAnimals();
            // Remove Dead Animal Process
            main.removeDeadAnimals(main.animalsList);

            for (int iter = 0; iter < days; iter++) {
                main.runSimulation(iter, field, main.animalsList);
            }

            //main.printAnimals(main.animalsList);

            // FINAL
            for (Animal anim : main.animalsList) {
                main.outputToSave(anim.makeSound());
            }

            String message = "";

            for (String str : main.consoleResult) {
                message += (str) + "\n";
            }

            FileWriter file = new FileWriter("output.txt");
            PrintWriter outFile = new PrintWriter(file);
            System.out.println(message);
            outFile.print(message);
            outFile.close();
            System.exit(0);

        } catch (NumberFormatException e) {
            main.output("The grass is out of bounds\n");
        } catch (Exception e) {
            if (e.getMessage() == null) {
                main.output("The grass is out of bounds\n");
            }
            main.output(e.getMessage());
        }

    }

    // This is the end of the Main class
}

/**
 * Field which has grass.
 */
class Field {
    // property
    private float grassAmount;

    /**
     * constructor
     * @param grassAmountSet
     */
    Field(float grassAmountSet) {
        this.grassAmount = grassAmountSet;
    }

    /**
     * method to grow grass
     */
    public void grassGrow() {
        this.grassAmount *= 2;
        // Error grass out of bounds
        final float hundred = 100F;
        this.grassAmount = Math.min(this.grassAmount, hundred);
    }

    /**
     * method
     * @return void
     */
    public float getGrassAmount() {
        return grassAmount;
    }

    /**
     * method
     * @param grassAmountSet
     */
    public void setGrassAmount(float grassAmountSet) {
        this.grassAmount = grassAmountSet;
    }
}

/**
 * Abstract Animal class
 */
abstract class Animal {
    // properties
    private float weight;
    private float speed;
    private float energy;

    /**
     * @param weightSet
     * @param speedSet
     * @param energySet
     */
    protected Animal(float weightSet, float speedSet, float energySet) {
        this.weight = weightSet;
        this.speed = speedSet;
        this.energy = energySet;
    }

    /**
     * method
     * @return weight
     */
    public float getWeight() {
        return weight;
    }

    /**
     * method
     * @return speed
     */
    public float getSpeed() {
        return speed;
    }

    /**
     * method
     * @return energy
     */
    public float getEnergy() {
        return energy;
    }

    /**
     * method
     * @param energySet
     */
    public void setEnergy(float energySet) {
        this.energy = energySet;
    }

    /**
     * method
     * @return void
     */
    public abstract String makeSound();

    /**
     * method
     */
    public void decrementEnergy() {
        this.energy -= 1;
    }
}

/**
 * Lion class
 */
class Lion extends Animal {
    private final String animalName = "Lion";
    Lion(float weight, float speed, float energy) {
        super(weight, speed, energy);
    }

    public String makeSound() {
        return AnimalSound.ROAR.getSound("Lion");
    }

}

/**
 * Zebra Class
 */
class Zebra extends Animal {
    private final String animalName = "Zebra";
    Zebra(float weight, float speed, float energy) {
        super(weight, speed, energy);
    }

    public String makeSound() {
        return AnimalSound.IHOHO.getSound("Zebra");
    }
}

/**
 * Boar Class
 */
class Boar extends Animal {
    private final String animalName = "Boar";
    Boar(float weight, float speed, float energy) {
        super(weight, speed, energy);
    }

    public String makeSound() {
        return AnimalSound.OINK.getSound("Boar");
    }

}

/**
 * ENUM constants to make life easy.
 * I used getValue for my better understanding
 */
enum AnimalSound {
    /** Identify Sound. */
    ROAR("Roar"),

    /** Identify Sound. */
    IHOHO("Ihoho"),

    /** Identify Sound. */
    OINK("Oink");

    private String sound;

    /** Methods and operations.
     * parse(String) - string to enum
     * @param soundSet String
     * */


    AnimalSound(String soundSet) {
        this.sound = soundSet;
    }

    // to check which animal's sound
    public String getSound(String animalName) {
        if (animalName.equals("Lion")) {
            return ROAR.sound;
        } else if (animalName.equals("Zebra")) {
            return IHOHO.sound;
        } else {
            return OINK.sound;
        }
    }


}



/**
 * If input is invalid.
 */
class InvalidInputsException extends Exception {
    /**
     * constructor of Invalid Input.
     */
    InvalidInputsException() {
        // Call constructor of parent Exception
        super("Invalid inputs\n");
    }
}

/**
 * Grass
 */
class GrassOutOfBoundsException extends Exception {
    /**
     * constructor of Invalid Grass.
     */
    GrassOutOfBoundsException() {
        // Call constructor of parent Exception
        super("The grass is out of bounds\n");
    }
}

/**
 * Params
 */
class InvalidNumberOfAnimalParametersException extends Exception {
    /**
     * constructor of Invalid Params size.
     */
    InvalidNumberOfAnimalParametersException() {
        // Call constructor of parent Exception
        super("Invalid number of animal parameters\n");
    }
}

/**
 * Weight
 */
class WeightOutOfBoundsException extends Exception {
    /**
     * constructor of Invalid Weight.
     */
    WeightOutOfBoundsException() {
        // Call constructor of parent Exception
        super("The weight is out of bounds\n");
    }
}

/**
 * Speed
 */
class SpeedOutOfBoundsException extends Exception {
    /**
     * constructor of Invalid Speed.
     */
    SpeedOutOfBoundsException() {
        // Call constructor of parent Exception
        super("The speed is out of bounds\n");
    }
}

/**
 * Energy
 */
class EnergyOutOfBoundsException extends Exception {
    /**
     * constructor of Invalid Energy.
     */
    EnergyOutOfBoundsException() {
        // Call constructor of parent Exception
        super("The energy is out of bounds\n");
    }
}
